"use client";
import React, { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { socket } from "../../socket";
import axios from "axios";

const ChatWithDoctorAI = () => {
  const [messages, setMessages] = useState([
    { sender: "AI", text: "Hi, this is Doctor AI. How can I assist you today?" },
  ]);
  const [userId, setUserId] = useState(null)
  useEffect(() => {
    const storedData = JSON.parse(localStorage.getItem("dot_user") || "{}")
    setUserId(storedData.userId)
  })

  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const handleSendMessage = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!inputMessage.trim()) return;
  
    const userMessage = inputMessage.trim();
  
    setMessages((prev) => [...prev, { sender: "User", text: userMessage }]);
    setInputMessage("");
    setIsLoading(true);
  
    const prompts = `You are a compassionate doctor. Respond to this query conversationally, offering practical insights, remedies, or guidance: "${userMessage}"`;
  
    socket.emit("symptoms", { prompts });
  
    socket.once("symp_response", ({ response }) => {
      setMessages((prev) => [...prev, { sender: "AI", text: response }]);
      setIsLoading(false);
    });
  };
  

  const handleSave = () => {
    const formattedMessages = JSON.stringify(messages, null, 2); 
    console.log(formattedMessages, "this is the formatted message")
    // Pretty-print the messages array for readability
  
    const prompt = `
      You will be given a text conversation between an AI and a patient, where the patient describes symptoms and the AI provides suggestions, medicines, and medical advice.
  
      Conversation:
      ${formattedMessages}
  
      Provide four points in this format:
      1. What the user is suffering from.
      2. Suggestions given by the 
      3. Medicines and medical advice.
      4. the field of the doctor to review
  
      Each response must be concise, with a maximum of 150 characters per point.
    `;
  
    socket.emit("summery", { prompt });
  
    socket.on("summery_response", async ({ response }) => {
      console.log("Summary generated by AI:", response);
      const res = {
        response: response
      }
      console.log("hya vitra xu hai ma guys", res)
      try {
  
        const addingSymptom = await axios.post("/api/symptom", {res, userId})
        console.log("added", addingSymptom)
        alert("aeeded")
      } catch (error) {
        console.log("this is the thing error thing", error)
      }
  
    });
  };
  

  const animationProps = {
    initial: { opacity: 0, scale: 0.9 },
    animate: { opacity: 1, scale: 1 },
    exit: { opacity: 0, scale: 0.9 },
    transition: { duration: 0.3 },
  };

  return (
    <div className="min-h-screen flex flex-col bg-gray-100 p-4 sm:p-6 lg:p-8">
      <div className="w-full max-w-3xl mx-auto flex-grow bg-white rounded-lg shadow-lg p-4 sm:p-6 lg:p-8 space-y-4">
        <h1 className="text-lg sm:text-xl font-semibold text-gray-800">Doctor AI Chat</h1>
        <div
          className="flex-grow h-[400px] overflow-y-auto border border-gray-300 p-4 rounded-lg space-y-4"
          style={{ backgroundColor: "#f9f9f9" }}
        >
          {messages.map((message, index) => (
            <motion.div
              key={index}
              {...animationProps}
              className={`flex ${message.sender === "User" ? "justify-end" : "justify-start"}`}
            >
              <div
                className={`max-w-sm px-4 py-2 rounded-lg shadow-sm ${
                  message.sender === "User"
                    ? "bg-blue-600 text-white"
                    : "bg-gray-200 text-gray-800"
                }`}
              >
                {message.text}
              </div>
            </motion.div>
          ))}
          {isLoading && (
            <motion.div
              {...animationProps}
              className="flex justify-start text-gray-500"
            >
              <div className="bg-gray-200 px-4 py-2 rounded-lg shadow-sm">Typing...</div>
            </motion.div>
          )}
        </div>
        <form
          onSubmit={handleSendMessage}
          className="mt-4 flex flex-col sm:flex-row items-center space-y-4 sm:space-y-0 sm:space-x-4"
        >
          <input
            type="text"
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            placeholder="Type your message..."
            className="w-full flex-grow px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-600"
          />
          <button
            type="submit"
            className="w-full sm:w-auto px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all"
          >
            Send
          </button>
        </form>
        <div className="mt-4">
          <button
          onClick={handleSave}
            className="w-full sm:w-auto px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-all"
          >
            Save to Dashboard
          </button>
          <p>This will save the chat summery in your patient dashboard which will be later reviewed by doctor you will be provided the suggestion.</p>
        </div>
      </div>
    </div>
  );
};

export default ChatWithDoctorAI;
